import asyncio
import logging
import sys
from os import getenv
from pathlib import Path
from datetime import datetime

from aiogram import Bot, Dispatcher, html, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    ReplyKeyboardRemove,
)
from backend.indexer import index_file

# Bot token can be obtained via https://t.me/BotFather
TOKEN = getenv("BOT_TOKEN")
print(TOKEN)
assert not (TOKEN is None), "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω"

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
start_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="upload")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
    ]
)

# All handlers should be attached to the Router (or Dispatcher)

dp = Dispatcher()


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π /start
    """
    await message.answer(
        f"Hello, {html.bold(message.from_user.full_name)}!\n"
        f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∏–∑—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –±—ã—Å—Ç—Ä–µ–µ.\n\n"
        f"–ù–∞–∂–º–∏ ¬´üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç¬ª, –∑–∞—Ç–µ–º –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.",
        reply_markup=start_keyboard,
    )


@dp.callback_query(F.data == "help")
async def on_help(callback: CallbackQuery) -> None:
    """
    –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞
    """
    await callback.message.answer(
        "–ö–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç:\n"
        "1) –ù–∞–∂–º–∏ ¬´üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç¬ª\n"
        "2) –ù–∞–∂–º–∏ —Å–∫—Ä–µ–ø–∫—É (üìé) ‚Üí ¬´–§–∞–π–ª¬ª/¬´–î–æ–∫—É–º–µ–Ω—Ç¬ª\n"
        "3) –í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª (PDF/DOCX/TXT –∏ —Ç.–ø.)\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤ –ø–∞–ø–∫—É ./uploads/",
        reply_markup=ReplyKeyboardRemove(),
    )
    await callback.answer()  # –∑–∞–∫—Ä—ã—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏


@dp.callback_query(F.data == "upload")
async def on_upload_click(callback: CallbackQuery) -> None:
    """
    –ü–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç¬ª –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–∞–π–ª
    """
    await callback.message.answer(
        "–ü—Ä–∏—à–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞–∫ —Ñ–∞–π–ª (–Ω–µ —Ñ–æ—Ç–æ). –ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –ø–æ –æ–¥–Ω–æ–º—É.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π –∏–ª–∏ –≤–≤–µ–¥–∏ /start –∑–∞–Ω–æ–≤–æ."
    )
    await callback.answer()

@dp.message(F.document)
async def handle_document(message: Message, bot: Bot) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ ./uploads
    """
    upload_dir = Path("./uploads")
    upload_dir.mkdir(parents=True, exist_ok=True)

    doc = message.document
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")
    original_name = doc.file_name or "file"
    safe_name = f"{timestamp}__{original_name}"
    dest_path = upload_dir / safe_name

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await bot.download(doc, destination=dest_path)

    await message.answer(
        "‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω.\n"
        f"–ü—É—Ç—å: <code>{dest_path.as_posix()}</code>\n"
        "–ù–∞—á–∏–Ω–∞—é –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é‚Ä¶ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
    )
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å polling
    def _run():
        index_file(str(dest_path))

    loop = asyncio.get_running_loop()
    try:
        await loop.run_in_executor(None, _run)
        await message.answer("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î Milvus.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: <code>{e}</code>")

async def main() -> None:
    # Initialize Bot instance with default bot properties which will be passed to all API calls
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())